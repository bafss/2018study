
变量
    系统变量
        $HOME   $PWD    $SHELL  $USER
        set所有的环境变量
    ""内可以使用变量
    unset 变量名 撤销变量
    expot 变量名  可把变量提升为全局变量，可供其他shell程序使用
        pstree
            脚本中的变量，外部shell看不到
    A=`wc -c 1.gg |cut -d " " -f1`   将命令的结果赋值给A

    $? 0-成功  上一次命令的返回值
    $$  当前进程编号
    $0  当前脚本名称
    $n  n位置的脚本参数
    $#  参数的个数
    $*|$@   所有参数    加双引号时$*整体输出 $@按空格分成几个

运算符
    $(((2+3)*4))
表达式
    [ 2 -gt 1 ] 非空返回true，可使用$?验证（0为true，>1为false）
    [ condition ] && echo OK || echo notok
    = 字符串比较
    -lt
    -le
    -eq
    -gt
    -ge
    -ne不等于
    -r有读的权限
    -w有写的权限
    -x有执行的权限
    -f文件存在  [ -f if.sh ]
    -s文件存在不为空
    -d目录存在
    -b文件存在并且是一个块设备
    -L文件存在并且是一个链接


流程控制
    #!/bin/bash

    for p in $@|1 2 3|{1..3}
    do
        echo $p
    done

    for((i=0;i<=5;i++))
    do
        echo "hah$i times"
    done

    while true
    do
        echo "haha"
        sleep 1
    done

    i=1

    while((i<=6))
    do
        echo $i
        i=$((i+1))
        #let i++
    done

    case $1 in
    start)
        echo "starting"
        ;;
    stop)
        echo "stoping"
        ;;
    *)
        echo "usage;{start|stop}"
    esac


    if [ $1 -gt $2 ]
    then
        echo ">"
    elif [ $1 -lt $2 ]
    then
        echo "<"
    else
        echo "equal"
    fi


    read -p "please enter a number" num值保存在num中

    时间
        date

函数
    sum 3 2;
    echo $?;
    function sum()
    {
        echo $1,$2;
        return $(($1+$2));
    }
    sum 5 7;
    echo $?

    1.先声明函数，后调用
    2.函数返回值[0-255] 只能通过$?获得 如果没有显式return 将以最后一条命令运行结果作为返回值

调试
    sh -vx fun.sh



文本处理
grep
awk
    last -n 5最近登录的5个
    awk -F ':' 'BEGIN {print "name,shell"} {print $1"\t"$3} END {print "blue,/bin/nosh"}'
sed
    sed 's/replace/new/g'   替换整行中的replace，如果没有g，只替换每行的第一个
    sed -n 's/^replace/&new/p'
        ^以replace开头
        -n和p一起使用表示只打印那些替换的行
        &在匹配到的后面加new
    sed 's/\(love\)able/\1rs/'    正则loveable会替换为lovers
    -e  -e    同一行里连续执行多个命令
    sed '2d' file 删除文件的第二行
    sed '2,$d' file 删除文件的第二行到末尾所有行
    sed '$d' file 删除文件的末行
    sed '/test/'d file 删除文件包含test的行
    -i更改文件内容
sort
    |sort -t ':' -k 3nr
        n按数字排
        r倒序
        -u去重
uniq去除排序中的重复行
    -c统计重复的个数

cut
   wc -c 1.gg |cut -d ' ' -f 1|3,5|3-|1-3
wc
    -l
    -w
    -m字符数
    -c字节数

